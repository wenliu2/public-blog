<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>K8s on 铁甲依然在</title>
    <link>https://wenliu2.github.io/public-blog/tags/k8s/</link>
    <description>Recent content in K8s on 铁甲依然在</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Tue, 02 Apr 2019 15:53:24 +0800</lastBuildDate>
    
	<atom:link href="https://wenliu2.github.io/public-blog/tags/k8s/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Issue   Websocket Closed</title>
      <link>https://wenliu2.github.io/public-blog/2019/04/issue-websocket-closed/</link>
      <pubDate>Tue, 02 Apr 2019 15:53:24 +0800</pubDate>
      
      <guid>https://wenliu2.github.io/public-blog/2019/04/issue-websocket-closed/</guid>
      <description>https://medium.com/@del680202/%E6%88%91%E5%9C%A8nginx-ingress-reload%E4%B8%8B%E6%8E%A1%E7%9A%84%E5%9D%91-6c0dba53838e</description>
    </item>
    
    <item>
      <title>Install prometheus-operator Manually</title>
      <link>https://wenliu2.github.io/public-blog/2019/04/install-prometheus-operator-manually/</link>
      <pubDate>Tue, 02 Apr 2019 13:40:34 +0800</pubDate>
      
      <guid>https://wenliu2.github.io/public-blog/2019/04/install-prometheus-operator-manually/</guid>
      <description>A k8s is ready, but it is behind corp firewall and has no internet access.
 Can&amp;rsquo;t install prometheus-operator with helm automatically.
 This guide explains how to install prometheus-operator in a k8s cluster without internet access.
  1. On the desktop with internet access, install helm.
2. Fetch chart source
mkdir $PWD/charts cd charts helm fetch --untar stable/prometheus-operator  This will fetch chart files of prometheus-operator and save them into prometheus-operator directory in current working dir.</description>
    </item>
    
    <item>
      <title>How to Change kube-apiserver Parameters</title>
      <link>https://wenliu2.github.io/public-blog/2019/04/how-to-change-kube-apiserver-parameters/</link>
      <pubDate>Mon, 01 Apr 2019 15:15:05 +0800</pubDate>
      
      <guid>https://wenliu2.github.io/public-blog/2019/04/how-to-change-kube-apiserver-parameters/</guid>
      <description>(for k8s cluster provisioned with kubeadm)
SSH to k8s master node, edit file: /etc/kubernetes/manifests/kube-apiserver.json.
kube-apiserver pod will restart automatically after saving.</description>
    </item>
    
    <item>
      <title>Verify DNS Is Working</title>
      <link>https://wenliu2.github.io/public-blog/2019/04/verify-dns-is-working/</link>
      <pubDate>Mon, 01 Apr 2019 13:55:35 +0800</pubDate>
      
      <guid>https://wenliu2.github.io/public-blog/2019/04/verify-dns-is-working/</guid>
      <description>1. On the Kubernetes master (if you used an HA deployment, select the primary master), set up a test environment by running the following command:kubectl create -f ./busybox.v1.yaml
apiVersion: extensions/v1beta1 kind: Deployment metadata: name: busybox spec: replicas: 1 selector: matchLabels: app: busybox template: metadata: labels: app: busybox spec: containers: - name: busybox image: busybox:1.28.3 command: - sleep - &amp;quot;3600&amp;quot; imagePullPolicy: IfNotPresent restartPolicy: Always  2. Verify that the test pod is running by executing the following command:</description>
    </item>
    
    <item>
      <title>Install k8s</title>
      <link>https://wenliu2.github.io/public-blog/2019/04/install-k8s/</link>
      <pubDate>Mon, 01 Apr 2019 09:26:08 +0800</pubDate>
      
      <guid>https://wenliu2.github.io/public-blog/2019/04/install-k8s/</guid>
      <description>Prerequisite  Install Ubuntu16.04 Install docker  Install kubeadm apt-get update &amp;amp;&amp;amp; apt-get install -y apt-transport-https curl curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - cat &amp;lt;&amp;lt;EOF &amp;gt;/etc/apt/sources.list.d/kubernetes.list deb https://apt.kubernetes.io/ kubernetes-xenial main EOF apt-get update apt-get install -y kubelet kubeadm kubectl apt-mark hold kubelet kubeadm kubectl  Creating a single master cluster with kubeadm Initializing your master Run as root(use calico as network addon): kubeadm init --pod-network-cidr=192.168.0.0/16 The output looks like:</description>
    </item>
    
  </channel>
</rss>